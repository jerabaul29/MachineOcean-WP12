""""""

import datetime
import netCDF4 as nc4
import motools.storm_surge.kyststasjoner_norge as kn
import motools.config as moc
from motools.helper import date as mod
from motools.helper import errors as moe
from motools.helper import bash as mob

mo_config = moc.Config()

"""
NOTES:
    - the dataset is quite small; is there a way to get longer time series?
"""

##################################################
# time aspect of the data preparation
##################################################

# the time period which is spanned
date_start = datetime.date(2017, 12, 1)
# date_end = datetime.date(2020, 7, 1)
date_end = datetime.date(2017, 12, 15)

# the number of entries per day
entries_per_day = ["00", "12"]
nbr_entries_per_day = len(entries_per_day)

duration_day = datetime.timedelta(days=1)
number_of_days = (date_end - date_start).days
number_of_entries = number_of_days * nbr_entries_per_day

print("generating data for storm surge between dates {} and {}".format(date_start, date_end))
print("corresponding to a theoretical number of entries: {}".format(number_of_entries))

##################################################
# data properties
##################################################

latitude_stations = kn.lat_23_coast_stations
longitude_stations = kn.lon_23_coast_stations

number_of_stations = latitude_stations.shape[0]

nbr_members = 52

##################################################
# generate the dataset
##################################################

folder_prepared_storm_surge = mo_config.getSetting("data", "stormSurgePreparedData")
name_dataset = "kystdata_{}_{}.nc".format(date_start, date_end)
nc_path_out = folder_prepared_storm_surge + "/" + name_dataset
print("dataset will be written to: {}".format(nc_path_out))

with nc4.Dataset(nc_path_out, 'w', format='NETCDF4') as nc4_fh:

    # global metadata
    commit_info = mob.subprocess_cmd("git show | head -1")
    description_string = "storm surge dataset from the Norwegian coast, generated by MachineOcean-WP12/storm_surge/learn_error/prepare_data/prepare_data.py, from commit: {}".format(commit_info)

    nc4_fh.Conventions = "CF-1.6"
    nc4_fh.title = "storm surge for the Norwegian coast"
    nc4_fh.description = description_string
    nc4_fh.institution = "IT department, Norwegian Meteorological Institute"
    nc4_fh.Contact = "jeanr@met.no"

    # dimensions
    station = nc4_fh.createDimension('station', number_of_stations)
    model_run_time = nc4_fh.createDimension('model_run_time', None)
    forecast_lead_time = nc4_fh.createDimension('forecast_lead_time', 121)
    member = nc4_fh.createDimension('member', 52)

    # fields
    latitude = nc4_fh.createVariable('latitude', 'f4', ('station'))
    longitude = nc4_fh.createVariable('longitude', 'f4', ('station'))
    time = nc4_fh.createVariable('time', 'f4', ('model_run_time', 'forecast_lead_time'))
    tide = nc4_fh.createVariable('tide', 'f4', ('model_run_time', 'forecast_lead_time', 'station'))
    obs_notide = nc4_fh.createVariable('obs_notide', 'f4', ('model_run_time', 'forecast_lead_time', 'station'))
    model_mean_notide = nc4_fh.createVariable('model_mean_notide', 'f4', ('model_run_time', 'forecast_lead_time', 'station'))
    model_std_notide = nc4_fh.createVariable('model_std_notide', 'f4', ('model_run_time', 'forecast_lead_time', 'station'))
    model_members_notide = nc4_fh.createVariable('model_members_notide', 'f4', ('model_run_time', 'forecast_lead_time', 'station', 'member'))
    valid = nc4_fh.createVariable('valid', 'i1', ('model_run_time'))

    # fields metadata
    latitude.units = "degree_north"
    longitude.unit = "degree_east"

    time.unit = "seconds since 1970-01-01 00:00:00 +0000"
    time.long_name = "the time for each of the data entries; this is a function of both the model_run_time, and the forecast_lead_time within each forecast"

    tide.unit = "meters"
    tide.long_name = "tide component of the water elevation"

    obs_notide.unit = "meters"
    obs_notide.long_name = "water heigth observation, where tide component has been subtracted"

    model_mean_notide.unit = "meters"
    model_mean_notide.long_name = "the mean of model ensemble predictions, i.e. mean storm surge prediction; this is based on the effect of the air pressure and wind speed; tide effect is not included"

    model_std_notide.unit = "meters"
    model_std_notide.long_name = "the std of model ensemble predictions, obtained similarly as model_mean_notide"

    model_members_notide.unit = "meters"
    model_members_notide.long_name = "the individual model prediction members, without tide effect; the content of these fields is discussed at https://github.com/metno/MachineOcean-WP12/issues/6"

    valid.unit = "flag"

    # create the
    # if no exception, just put the data.

    # if exception, make sure to fill with "bad" values and raise an exception flag inside the dataset

    # add an exception raised flag

    # this only gathers the data, i.e. this has no responsibility to check for availability of data in the past, etc

    # many data sources -> 'gathered' data records -> learning entries; this takes care of the first step
    # need one more step to go from gathered to learning entries; may require

    for crrt_date in mod.datetime_range(date_start, date_end):
        for crrt_day_entry in entries_per_day:
            print("generate data day {} entry {}".format(crrt_date, crrt_day_entry))
            # now looking at the entry corresponding to crrt_date at the time crrt_day_entry
            # there are some data / runs missing, corrupted, etc.
            try:
                path_to_kyst_data = kn.kyststasjoner_path(crrt_date, crrt_day_entry)
                obs, model_mean, model_std = kn.get_kyststasjoner_data(path_to_kyst_data)

            except AssertionError as e:
                moe.detailed_assert_repr(e)

            except Exception as e:
                print(repr(e))
